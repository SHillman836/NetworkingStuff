// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tcp_plus_data {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TcpPlusDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TcpPlusData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TcpPlusData<'a> {
  type Inner = TcpPlusData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TcpPlusData<'a> {
  pub const VT_CLIENT: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;
  pub const VT_REPEAT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TcpPlusData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TcpPlusDataArgs<'args>
  ) -> flatbuffers::WIPOffset<TcpPlusData<'bldr>> {
    let mut builder = TcpPlusDataBuilder::new(_fbb);
    builder.add_repeat(args.repeat);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.add_client(args.client);
    builder.finish()
  }


  #[inline]
  pub fn client(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TcpPlusData::VT_CLIENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TcpPlusData::VT_MESSAGE, None)}
  }
  #[inline]
  pub fn repeat(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TcpPlusData::VT_REPEAT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TcpPlusData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("client", Self::VT_CLIENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .visit_field::<u32>("repeat", Self::VT_REPEAT, false)?
     .finish();
    Ok(())
  }
}
pub struct TcpPlusDataArgs<'a> {
    pub client: u32,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
    pub repeat: u32,
}
impl<'a> Default for TcpPlusDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TcpPlusDataArgs {
      client: 0,
      message: None,
      repeat: 0,
    }
  }
}

pub struct TcpPlusDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TcpPlusDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_client(&mut self, client: u32) {
    self.fbb_.push_slot::<u32>(TcpPlusData::VT_CLIENT, client, 0);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TcpPlusData::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_repeat(&mut self, repeat: u32) {
    self.fbb_.push_slot::<u32>(TcpPlusData::VT_REPEAT, repeat, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TcpPlusDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TcpPlusDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TcpPlusData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TcpPlusData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TcpPlusData");
      ds.field("client", &self.client());
      ds.field("message", &self.message());
      ds.field("repeat", &self.repeat());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TcpPlusData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tcp_plus_data_unchecked`.
pub fn root_as_tcp_plus_data(buf: &[u8]) -> Result<TcpPlusData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TcpPlusData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TcpPlusData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_tcp_plus_data_unchecked`.
pub fn size_prefixed_root_as_tcp_plus_data(buf: &[u8]) -> Result<TcpPlusData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TcpPlusData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TcpPlusData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tcp_plus_data_unchecked`.
pub fn root_as_tcp_plus_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TcpPlusData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TcpPlusData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TcpPlusData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tcp_plus_data_unchecked`.
pub fn size_prefixed_root_as_tcp_plus_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TcpPlusData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TcpPlusData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TcpPlusData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TcpPlusData`.
pub unsafe fn root_as_tcp_plus_data_unchecked(buf: &[u8]) -> TcpPlusData {
  flatbuffers::root_unchecked::<TcpPlusData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TcpPlusData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TcpPlusData`.
pub unsafe fn size_prefixed_root_as_tcp_plus_data_unchecked(buf: &[u8]) -> TcpPlusData {
  flatbuffers::size_prefixed_root_unchecked::<TcpPlusData>(buf)
}
#[inline]
pub fn finish_tcp_plus_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TcpPlusData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_tcp_plus_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TcpPlusData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod TcpPlusData

